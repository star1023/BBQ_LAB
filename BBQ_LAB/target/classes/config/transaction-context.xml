<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:p="http://www.springframework.org/schema/p"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">


    <!-- [PlatformTransactionManager] Transaction 관리자 설정  -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="dataSource" />

    <!--  [Transaction PointCut Set]
        * AOP = [Config] - [Advisor] =>> [PointCut] - [Advice]
        - <aop:config/> 정의는 txAdvice 빈이 정의한 트랜잭션이 적용된 어브바이스가 프로그램에서 적절한 지점에서 실행된다는 것을 보장한다.
        - Target 클래스에 Proxying을 적용할 때 항상 모든 메써드가 호출될 때마다 Advice되기를 원하지 않는다.
          Maybe 대부분의 Aspect들이 특정 클래스의 특정 메써드에 대해서만 Advice되도록 사용되는 것이 일반적이다. 이와 같이 특정 패턴을 정의하는 것이 PointCut.
        - Spring F/W에서는 PointCut 더 편리하게 사용할 수 있도록 하기 위하여 Advisor Class를 제공한다. Advisor를 생성할 때 PointCut과 Advice를 필요로하고 있다.
     -->
	<aop:config proxy-target-class="true">
	   <!-- [PointCut] Transaction 적용되기를 원하는 서비스 객체
	      - Service Implements(I/F)가 정의한 연산의 모든 Execution에 Transaction이 적용된 Advice가 실행된다는 것을 보장한다. -->
		<!--<aop:pointcut id="requiredTxService" expression="execution(* kr.co.genesiskorea.*.*ServiceImpl.*(..))"/>  -->
		<aop:pointcut id="requiredTxService" expression="execution(public * kr.co.genesiskorea.service.impl.*ServiceImpl.*(..))"/>
		<aop:advisor pointcut-ref="requiredTxService" advice-ref="txAdviceService" />
	</aop:config>

	<!--  [Transaction Advice Set] 트랜잭션이 적용된 어드바이스
        - rollback-for = "RuntimeException" => "Exception"
	    * 스프링 트랜잭션 AOP는 default 옵션으로 unchecked Exception인 RuntimeException에 대해서만 롤백을 해준다.
	    - UnChecked Exception = NullPointerException/NumberFormatException/ClassCastException/IndexOutOfBoundsException/...
	    - Checked Exception = IOException/SQLException/MalformedURLException/Other Checked Exception
	 -->
	<tx:advice id="txAdviceService" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<!-- 'select'으로 시작하는 모든 메서드들은 읽기전용이다 -->
			<tx:method name="select*" read-only="true"/>
			<tx:method name="valid*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<!-- [*]다름 메서드들은 기본 트랜잭션 설정을 사용한다. -->
			<!--tx:method name="*" rollback-for="Exception"/ -->
		</tx:attributes>
	</tx:advice>

</beans>